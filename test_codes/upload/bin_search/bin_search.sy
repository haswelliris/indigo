
void QuickSort(int []arr, int low, int high)
{
    if (low < high)
    {
        int i = low;
        int j = high;
        int k = arr[low];
        while (i < j)
        {
            while(i < j && arr[j] >= k)     // 从右向左找第一个小于k的数
            {
                j=j-1
            }
            if(i < j)
            {
                arr[i] = arr[j];
                i=i+1;
            }
            while(i < j && arr[i] < k)      // 从左向右找第一个大于等于k的数
            {
                i=i+1;
            }
            if(i < j)
            {
                arr[j] = arr[i];
                j=j-1;
            }
        }
        arr[i] = k;
        // 递归调用
        QuickSort(arr, low, i - 1);     // 排序k左边
        QuickSort(arr, i + 1, high);    // 排序k右边
    }
}



int find(int n,int a[],int l)
{
  int low=0;
  int high=l-1;
  int middle=0;
  while(low<high)
  {
    middle=(low+high)/2;
    if(n==a[middle])
    {
      return middle;
    }
    else
    {
      if(n>a[middle])
        low=middle+1;
      else
        high=middle-1;
    } 
  }
  return -1;
}
int main(){
  int a[]={2,3,5,6,7,8,9,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60};
  int b[100];
  int l1=27;
  int i=0,n;

  int l2=getarray(b);
  int op=getint();
  while(op!=-1){
    n=getint();
    if(op==0){
    putint(find(n,a,l1));
    }else{
      putint(find(n,b,l2));
    }
    putch(10);
    op=getint();
  }
  return 0;
}